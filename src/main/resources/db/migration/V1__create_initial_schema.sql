-- ============================================================================
-- MIGRAÇÃO V1: CRIAÇÃO DO SCHEMA INICIAL COMPLETO
-- ============================================================================
-- Esta migração cria todas as tabelas do sistema MVT Events
-- Baseada no schema de produção em funcionamento

-- ============================================================================
-- TABELA: ATHLETES
-- ============================================================================
CREATE TABLE IF NOT EXISTS athletes (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    created_at TIMESTAMP(6),
    updated_at TIMESTAMP(6),
    address TEXT,
    city VARCHAR(100),
    country VARCHAR(100),
    date_of_birth DATE,
    document_number VARCHAR(20),
    email VARCHAR(255) NOT NULL,
    emergency_contact VARCHAR(255),
    gender VARCHAR(10),
    name VARCHAR(255) NOT NULL,
    phone VARCHAR(255),
    state VARCHAR(100),
    PRIMARY KEY (id),
    CONSTRAINT athletes_gender_check CHECK (gender IN ('MALE', 'FEMALE', 'OTHER'))
);

-- ============================================================================
-- TABELA: ORGANIZATIONS
-- ============================================================================
CREATE TABLE IF NOT EXISTS organizations (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    created_at TIMESTAMP(6),
    updated_at TIMESTAMP(6),
    contact_email VARCHAR(255) NOT NULL,
    description TEXT,
    logo_url VARCHAR(255),
    name VARCHAR(255) NOT NULL,
    phone VARCHAR(255),
    slug VARCHAR(100) NOT NULL,
    website VARCHAR(255),
    PRIMARY KEY (id)
);

-- ============================================================================
-- TABELA: EVENTS
-- ============================================================================
CREATE TABLE IF NOT EXISTS events (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    created_at TIMESTAMP(6),
    updated_at TIMESTAMP(6),
    address TEXT,
    banner_url VARCHAR(255),
    currency VARCHAR(3),
    description TEXT,
    event_date DATE NOT NULL,
    event_time TIME(6),
    event_type VARCHAR(50) NOT NULL,
    location VARCHAR(255),
    max_participants INTEGER,
    name VARCHAR(255) NOT NULL,
    platform_fee_percentage DECIMAL(5,4),
    price DECIMAL(10,2),
    registration_end_date TIMESTAMP(6),
    registration_open BOOLEAN,
    registration_start_date TIMESTAMP(6),
    slug VARCHAR(100) NOT NULL,
    starts_at TIMESTAMP(6) NOT NULL,
    status VARCHAR(20),
    terms_and_conditions TEXT,
    transfer_frequency VARCHAR(20),
    organization_id BIGINT NOT NULL,
    PRIMARY KEY (id),
    CONSTRAINT events_event_type_check CHECK (event_type IN (
        'RUNNING', 'CYCLING', 'TRIATHLON', 'SWIMMING', 'WALKING', 
        'TRAIL_RUNNING', 'MOUNTAIN_BIKING', 'ROAD_CYCLING', 'MARATHON', 
        'HALF_MARATHON', 'ULTRA_MARATHON', 'OBSTACLE_RACE', 'DUATHLON', 'OTHER'
    )),
    CONSTRAINT events_status_check CHECK (status IN ('DRAFT', 'PUBLISHED', 'CANCELLED', 'COMPLETED')),
    CONSTRAINT events_transfer_frequency_check CHECK (transfer_frequency IN (
        'IMMEDIATE', 'DAILY', 'WEEKLY', 'MONTHLY', 'ON_DEMAND'
    ))
);

-- ============================================================================
-- TABELA: EVENT_FINANCIALS
-- ============================================================================
CREATE TABLE IF NOT EXISTS event_financials (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    created_at TIMESTAMP(6),
    updated_at TIMESTAMP(6),
    last_transfer_date TIMESTAMP(6),
    net_revenue DECIMAL(12,2) NOT NULL,
    next_transfer_date TIMESTAMP(6),
    pending_transfer_amount DECIMAL(12,2) NOT NULL,
    platform_fees DECIMAL(12,2) NOT NULL,
    total_payments INTEGER NOT NULL,
    total_revenue DECIMAL(12,2) NOT NULL,
    total_transfer_fees DECIMAL(12,2) NOT NULL,
    transfer_frequency VARCHAR(20) NOT NULL,
    transferred_amount DECIMAL(12,2) NOT NULL,
    event_id BIGINT NOT NULL,
    PRIMARY KEY (id),
    CONSTRAINT event_financials_transfer_frequency_check CHECK (transfer_frequency IN (
        'IMMEDIATE', 'DAILY', 'WEEKLY', 'MONTHLY', 'ON_DEMAND'
    ))
);

-- ============================================================================
-- TABELA: REGISTRATIONS
-- ============================================================================
CREATE TABLE IF NOT EXISTS registrations (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    created_at TIMESTAMP(6),
    updated_at TIMESTAMP(6),
    amount_paid DECIMAL(10,2),
    bib_number INTEGER,
    category VARCHAR(100),
    payment_method VARCHAR(50),
    payment_status VARCHAR(20),
    registration_date TIMESTAMP(6),
    special_needs TEXT,
    status VARCHAR(20),
    t_shirt_size VARCHAR(10),
    team_name VARCHAR(255),
    athlete_id BIGINT NOT NULL,
    event_id BIGINT NOT NULL,
    PRIMARY KEY (id),
    CONSTRAINT registrations_payment_status_check CHECK (payment_status IN (
        'PENDING', 'PAID', 'CANCELLED', 'REFUNDED'
    )),
    CONSTRAINT registrations_status_check CHECK (status IN (
        'ACTIVE', 'CANCELLED', 'DNS', 'DNF'
    ))
);

-- ============================================================================
-- TABELA: PAYMENTS
-- ============================================================================
CREATE TABLE IF NOT EXISTS payments (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    created_at TIMESTAMP(6),
    updated_at TIMESTAMP(6),
    amount DECIMAL(10,2) NOT NULL,
    currency VARCHAR(3) NOT NULL,
    gateway_fee DECIMAL(10,2),
    gateway_payment_id VARCHAR(255),
    gateway_provider VARCHAR(50),
    gateway_response JSONB,
    payment_method VARCHAR(50),
    processed_at TIMESTAMP(6),
    refund_amount DECIMAL(10,2),
    refund_reason TEXT,
    refunded_at TIMESTAMP(6),
    payment_status VARCHAR(20) NOT NULL,
    registration_id BIGINT NOT NULL,
    PRIMARY KEY (id),
    CONSTRAINT payments_payment_method_check CHECK (payment_method IN (
        'CREDIT_CARD', 'DEBIT_CARD', 'PIX', 'BANK_TRANSFER', 'CASH', 'OTHER'
    )),
    CONSTRAINT payments_payment_status_check CHECK (payment_status IN (
        'PENDING', 'PROCESSING', 'COMPLETED', 'FAILED', 'CANCELLED', 'REFUNDED', 'PARTIALLY_REFUNDED'
    ))
);

-- ============================================================================
-- TABELA: TRANSFERS
-- ============================================================================
CREATE TABLE IF NOT EXISTS transfers (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    created_at TIMESTAMP(6),
    updated_at TIMESTAMP(6),
    amount DECIMAL(12,2) NOT NULL,
    completed_at TIMESTAMP(6),
    currency VARCHAR(3) NOT NULL,
    destination_account VARCHAR(20),
    destination_agency VARCHAR(20),
    destination_bank VARCHAR(100),
    destination_key VARCHAR(255),
    failed_at TIMESTAMP(6),
    failure_reason TEXT,
    gateway_fee DECIMAL(10,2),
    gateway_provider VARCHAR(50),
    gateway_response JSONB,
    gateway_transfer_id VARCHAR(255),
    processed_at TIMESTAMP(6),
    requested_at TIMESTAMP(6) NOT NULL,
    retry_count INTEGER,
    status VARCHAR(20) NOT NULL,
    transfer_method VARCHAR(50) NOT NULL,
    transfer_type VARCHAR(20) NOT NULL,
    event_id BIGINT NOT NULL,
    organization_id BIGINT NOT NULL,
    PRIMARY KEY (id),
    CONSTRAINT transfers_status_check CHECK (status IN (
        'PENDING', 'PROCESSING', 'COMPLETED', 'FAILED', 'CANCELLED'
    )),
    CONSTRAINT transfers_transfer_method_check CHECK (transfer_method IN (
        'PIX', 'BANK_TRANSFER', 'TED', 'MANUAL'
    )),
    CONSTRAINT transfers_transfer_type_check CHECK (transfer_type IN (
        'AUTOMATIC', 'MANUAL', 'SCHEDULED'
    ))
);

-- ============================================================================
-- TABELA: PAYMENT_EVENTS
-- ============================================================================
CREATE TABLE IF NOT EXISTS payment_events (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    created_at TIMESTAMP(6),
    updated_at TIMESTAMP(6),
    amount DECIMAL(12,2),
    currency VARCHAR(3),
    description TEXT,
    event_data JSONB,
    event_type VARCHAR(50) NOT NULL,
    gateway_reference VARCHAR(255),
    processed_by VARCHAR(255),
    event_id BIGINT NOT NULL,
    payment_id BIGINT NOT NULL,
    transfer_id BIGINT,
    PRIMARY KEY (id),
    CONSTRAINT payment_events_event_type_check CHECK (event_type IN (
        'PAYMENT_RECEIVED', 'PAYMENT_REFUNDED', 'PAYMENT_PARTIALLY_REFUNDED',
        'PAYMENT_CHARGED_BACK', 'PLATFORM_FEE_CALCULATED', 'TRANSFER_INITIATED',
        'TRANSFER_COMPLETED', 'TRANSFER_FAILED', 'FINANCIAL_ADJUSTMENT'
    ))
);

-- ============================================================================
-- TABELA: USERS
-- ============================================================================
CREATE TABLE IF NOT EXISTS users (
    id UUID NOT NULL,
    created_at TIMESTAMP(6) NOT NULL,
    email VARCHAR(255) NOT NULL,
    enabled BOOLEAN NOT NULL,
    password VARCHAR(255) NOT NULL,
    role VARCHAR(255) NOT NULL,
    updated_at TIMESTAMP(6) NOT NULL,
    username VARCHAR(255) NOT NULL,
    PRIMARY KEY (id),
    CONSTRAINT users_role_check CHECK (role IN ('USER', 'ADMIN'))
);

-- ============================================================================
-- ÍNDICES ÚNICOS (com tratamento de existência)
-- ============================================================================
DO $$
BEGIN
    -- Unique constraints for athletes
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'ukek0v4gdbthm9d0pgs4itg21j0') THEN
        ALTER TABLE athletes ADD CONSTRAINT ukek0v4gdbthm9d0pgs4itg21j0 UNIQUE (document_number);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'ukn0i3de0t8dyv19qn45vgyi322') THEN
        ALTER TABLE athletes ADD CONSTRAINT ukn0i3de0t8dyv19qn45vgyi322 UNIQUE (email);
    END IF;
    
    -- Unique constraints for organizations
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'uksfr9257mbjkowos3ci3e22ay2') THEN
        ALTER TABLE organizations ADD CONSTRAINT uksfr9257mbjkowos3ci3e22ay2 UNIQUE (slug);
    END IF;
    
    -- Unique constraints for events
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'uk153gnccmeyks5dlt154kkgch5') THEN
        ALTER TABLE events ADD CONSTRAINT uk153gnccmeyks5dlt154kkgch5 UNIQUE (slug);
    END IF;
    
    -- Unique constraints for event_financials
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'uk4adkilqs0mjxvf2ypbwalyvc') THEN
        ALTER TABLE event_financials ADD CONSTRAINT uk4adkilqs0mjxvf2ypbwalyvc UNIQUE (event_id);
    END IF;
    
    -- Unique constraints for registrations
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'uk18v3flm45yg9d3o380mne8cof') THEN
        ALTER TABLE registrations ADD CONSTRAINT uk18v3flm45yg9d3o380mne8cof UNIQUE (event_id, athlete_id);
    END IF;
    
    -- Unique constraints for users
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'ukr43af9ap4edm43mmtq01oddj6') THEN
        ALTER TABLE users ADD CONSTRAINT ukr43af9ap4edm43mmtq01oddj6 UNIQUE (username);
    END IF;
END
$$;

-- ============================================================================
-- CHAVES ESTRANGEIRAS (com tratamento de existência)
-- ============================================================================
DO $$
BEGIN
    -- Foreign keys for events
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'fkghg7dncn6gxt9fafba44f52b6') THEN
        ALTER TABLE events ADD CONSTRAINT fkghg7dncn6gxt9fafba44f52b6 
            FOREIGN KEY (organization_id) REFERENCES organizations(id);
    END IF;
    
    -- Foreign keys for event_financials
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'fk5fqdoq49jbc47s77fokxi6vg4') THEN
        ALTER TABLE event_financials ADD CONSTRAINT fk5fqdoq49jbc47s77fokxi6vg4 
            FOREIGN KEY (event_id) REFERENCES events(id);
    END IF;
    
    -- Foreign keys for registrations
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'fkn59hfc6jmae6j23flb53nqqvd') THEN
        ALTER TABLE registrations ADD CONSTRAINT fkn59hfc6jmae6j23flb53nqqvd 
            FOREIGN KEY (athlete_id) REFERENCES athletes(id);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'fk8mi58jt1s8fxmi56jnau0cxqw') THEN
        ALTER TABLE registrations ADD CONSTRAINT fk8mi58jt1s8fxmi56jnau0cxqw 
            FOREIGN KEY (event_id) REFERENCES events(id);
    END IF;
    
    -- Foreign keys for payments
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'fkoqpcqbwe482dbi5749buw6936') THEN
        ALTER TABLE payments ADD CONSTRAINT fkoqpcqbwe482dbi5749buw6936 
            FOREIGN KEY (registration_id) REFERENCES registrations(id);
    END IF;
    
    -- Foreign keys for transfers
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'fk3fx7pw8v0srhoydir6000i7qm') THEN
        ALTER TABLE transfers ADD CONSTRAINT fk3fx7pw8v0srhoydir6000i7qm 
            FOREIGN KEY (event_id) REFERENCES events(id);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'fk685q648ih2jtjhh7nfest5cl2') THEN
        ALTER TABLE transfers ADD CONSTRAINT fk685q648ih2jtjhh7nfest5cl2 
            FOREIGN KEY (organization_id) REFERENCES organizations(id);
    END IF;
    
    -- Foreign keys for payment_events
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'fk3u19yqka1eq1ep85kubuju65q') THEN
        ALTER TABLE payment_events ADD CONSTRAINT fk3u19yqka1eq1ep85kubuju65q 
            FOREIGN KEY (event_id) REFERENCES events(id);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'fke86hr8sww5wcn9aiilg8ykchi') THEN
        ALTER TABLE payment_events ADD CONSTRAINT fke86hr8sww5wcn9aiilg8ykchi 
            FOREIGN KEY (payment_id) REFERENCES payments(id);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'fk8hu7cate0x1o84iys7q4lohcv') THEN
        ALTER TABLE payment_events ADD CONSTRAINT fk8hu7cate0x1o84iys7q4lohcv 
            FOREIGN KEY (transfer_id) REFERENCES transfers(id);
    END IF;
END
$$;

-- ============================================================================
-- SEQUÊNCIAS
-- ============================================================================
-- As sequências são criadas automaticamente pelo GENERATED BY DEFAULT AS IDENTITY

-- ============================================================================
-- COMENTÁRIOS
-- ============================================================================
COMMENT ON TABLE athletes IS 'Tabela de atletas registrados no sistema';
COMMENT ON TABLE organizations IS 'Tabela de organizações que criam eventos';
COMMENT ON TABLE events IS 'Tabela de eventos esportivos';
COMMENT ON TABLE event_financials IS 'Tabela de dados financeiros dos eventos';
COMMENT ON TABLE registrations IS 'Tabela de inscrições de atletas em eventos';
COMMENT ON TABLE payments IS 'Tabela de pagamentos das inscrições';
COMMENT ON TABLE transfers IS 'Tabela de transferências para organizações';
COMMENT ON TABLE payment_events IS 'Tabela de eventos de pagamento para auditoria';
COMMENT ON TABLE users IS 'Tabela de usuários do sistema';